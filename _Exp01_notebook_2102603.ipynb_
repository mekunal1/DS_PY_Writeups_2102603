{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"https://github.com/profanup/DSPY22-23-Even/blob/main/Experiment_01_numpy.ipynb","timestamp":1677259980389}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["**Experiment No :** 01\n","\n","**Aim :** Learn basics of Numpy library for storing and efficiently processing any external data into python execution pipeline.\n","\n","**Theory :**  **NumPy** (short for Numerical Python) provides an efficient interface to store and operate on dense data buffers. In some ways, *NumPy arrays* are like Python's built-in *list type*, but NumPy arrays provide much more *efficient storage* and *data operations* as the arrays grow larger in size. NumPy arrays form the core of nearly the entire ecosystem of data science tools in Python\n","\n","NumPy is a Python library used for working with arrays. It also has functions for working in domain of linear algebra, fourier transform, and matrices. NumPy was created in 2005 by Travis Oliphant. It is an open source project and you can use it freely.\n","\n","In Python we have lists that serve the purpose of arrays, but they are slow to process. NumPy aims to provide an array object that is up to 50x faster than traditional Python lists. The array object in NumPy is called *ndarray*, it provides a lot of supporting functions that make working with *ndarray* very easy.\n","Arrays are very frequently used in data science, where speed and resources are very important.\n","\n","NumPy arrays are stored at one continuous place in memory unlike lists, so processes can access and manipulate them very efficiently. This behavior is called locality of reference in computer science. This is the main reason why NumPy is faster than lists. Also it is optimized to work with latest CPU architectures.\n","\n"],"metadata":{"id":"eTOpwleUjhEc"}},{"cell_type":"markdown","source":["**Working :**"],"metadata":{"id":"wXeSkgt6EAur"}},{"cell_type":"code","execution_count":46,"metadata":{"id":"aci_dNppq6Dm","colab":{"base_uri":"https://localhost:8080/","height":35},"outputId":"09856d5f-ba13-470f-8757-398929789fd2","executionInfo":{"status":"ok","timestamp":1677260289597,"user_tz":-330,"elapsed":350,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'1.22.4'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":46}],"source":["import numpy\n","numpy.__version__"]},{"cell_type":"markdown","source":["**A Python List Is More Than Just a List**\n","\n","Let's consider now what happens when we use a Python data structure that holds many Python objects. The standard mutable multi-element container in Python is the list. We can create a list of integers as follows:"],"metadata":{"id":"o8DgaYQBuiz8"}},{"cell_type":"code","source":["L = list(range(10))\n","L"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0misdp5Luo8h","outputId":"af9ecc30-6823-4834-dfea-c46a815ebd93","executionInfo":{"status":"ok","timestamp":1677260290707,"user_tz":-330,"elapsed":497,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}}},"execution_count":47,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"]},"metadata":{},"execution_count":47}]},{"cell_type":"code","source":["type(L[0])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nEY3A3fKur-v","outputId":"73db4bb0-f560-495b-d426-14061a6f1f8a","executionInfo":{"status":"ok","timestamp":1677260290707,"user_tz":-330,"elapsed":101,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}}},"execution_count":48,"outputs":[{"output_type":"execute_result","data":{"text/plain":["int"]},"metadata":{},"execution_count":48}]},{"cell_type":"code","source":["L2 = [str(c) for c in L]\n","L2"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"peiODg-wu0UP","outputId":"e6f974fc-c7ad-4fae-efef-1ceb443c21fc","executionInfo":{"status":"ok","timestamp":1677260290707,"user_tz":-330,"elapsed":98,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}}},"execution_count":49,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']"]},"metadata":{},"execution_count":49}]},{"cell_type":"code","source":["type(L2[0])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VtIcV8pVu29N","outputId":"29b6de1c-c77e-4df5-dd1e-735c0561708f","executionInfo":{"status":"ok","timestamp":1677260290708,"user_tz":-330,"elapsed":95,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}}},"execution_count":50,"outputs":[{"output_type":"execute_result","data":{"text/plain":["str"]},"metadata":{},"execution_count":50}]},{"cell_type":"code","source":["L3 = [True, \"2\", 3.0, 4]\n","[type(item) for item in L3]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yvmZGyteu6vH","outputId":"09266e10-1d1f-456d-873a-82938acb65d9","executionInfo":{"status":"ok","timestamp":1677260290708,"user_tz":-330,"elapsed":91,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}}},"execution_count":51,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[bool, str, float, int]"]},"metadata":{},"execution_count":51}]},{"cell_type":"markdown","source":["## Fixed-Type Arrays in Python\n","\n","Python offers several different options for storing data in efficient, fixed-type data buffers.\n","The built-in ``array`` module (available since Python 3.3) can be used to create dense arrays of a uniform type:"],"metadata":{"id":"WigRtVzrvEoy"}},{"cell_type":"code","source":["import array\n","L = list(range(10))\n","A = array.array('i', L)\n","A"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Mtu3TuuGvKZW","outputId":"0fde4f29-769f-4d48-ca47-697acc099ae8","executionInfo":{"status":"ok","timestamp":1677260290708,"user_tz":-330,"elapsed":87,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}}},"execution_count":52,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array('i', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"]},"metadata":{},"execution_count":52}]},{"cell_type":"markdown","source":["\n","## Creating Arrays from Python Lists\n","\n","First, we can use ``np.array`` to create arrays from Python lists:"],"metadata":{"id":"xCEKacaQwcb2"}},{"cell_type":"code","source":["import numpy as np\n","# integer array:\n","np.array([1, 4, 2, 5, 3])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Df2kJJVKwd1V","outputId":"e3778197-2644-4bdb-b0ed-ae5859e48b5d","executionInfo":{"status":"ok","timestamp":1677260290709,"user_tz":-330,"elapsed":84,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}}},"execution_count":53,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1, 4, 2, 5, 3])"]},"metadata":{},"execution_count":53}]},{"cell_type":"markdown","source":["Remember that unlike Python lists, NumPy is constrained to arrays that all contain the same type. If types do not match, NumPy will upcast if possible (here, integers are up-cast to floating point):"],"metadata":{"id":"aSXNgXDbwqyU"}},{"cell_type":"code","source":["np.array([3.14, 4, 2, 3])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SFoqtm67wqd4","outputId":"46a8fef1-71c3-4d1e-cace-4bda0cb56c65","executionInfo":{"status":"ok","timestamp":1677260290709,"user_tz":-330,"elapsed":81,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}}},"execution_count":54,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([3.14, 4.  , 2.  , 3.  ])"]},"metadata":{},"execution_count":54}]},{"cell_type":"markdown","source":["If we want to explicitly set the data type of the resulting array, we can use the ``dtype`` keyword:"],"metadata":{"id":"zCM50ofhwxy-"}},{"cell_type":"code","source":["np.array([1, 2, 3, 4], dtype='float32')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"58Ra0aDMw2oL","outputId":"c7c68c0e-409b-4fe9-a58e-1ffe33267628","executionInfo":{"status":"ok","timestamp":1677260290709,"user_tz":-330,"elapsed":78,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}}},"execution_count":55,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1., 2., 3., 4.], dtype=float32)"]},"metadata":{},"execution_count":55}]},{"cell_type":"markdown","source":["Finally, unlike Python lists, NumPy arrays can explicitly be multi-dimensional; here's one way of initializing a multidimensional array using a list of lists:"],"metadata":{"id":"TTFC1GqJxfzn"}},{"cell_type":"code","source":["# nested lists result in multi-dimensional arrays\n","np.array([range(i, i + 3) for i in [2, 4, 6]])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EPgUUQZ-xYpd","outputId":"3dc21939-0196-4591-ffe4-85c94c4ed456","executionInfo":{"status":"ok","timestamp":1677260290710,"user_tz":-330,"elapsed":77,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}}},"execution_count":56,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[2, 3, 4],\n","       [4, 5, 6],\n","       [6, 7, 8]])"]},"metadata":{},"execution_count":56}]},{"cell_type":"markdown","source":["## Creating Arrays from Scratch\n","\n","Especially for larger arrays, it is more efficient to create arrays from scratch using routines built into NumPy.\n","Here are several examples:"],"metadata":{"id":"c20zcRzBxxey"}},{"cell_type":"code","source":["# Create a length-10 integer array filled with zeros\n","np.zeros(10, dtype=int)"],"metadata":{"id":"4Df8zJxFxBdq","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677260290710,"user_tz":-330,"elapsed":74,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}},"outputId":"feb8f2ce-96ef-4ce5-c070-7a5d97968413"},"execution_count":57,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])"]},"metadata":{},"execution_count":57}]},{"cell_type":"code","source":["# Create a 3x5 floating-point array filled with ones\n","np.ones((3, 5), dtype=float)"],"metadata":{"id":"YeqU_GSexC5m","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677260290710,"user_tz":-330,"elapsed":72,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}},"outputId":"8833951b-8634-4586-8baf-7ec602e48b2c"},"execution_count":58,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[1., 1., 1., 1., 1.],\n","       [1., 1., 1., 1., 1.],\n","       [1., 1., 1., 1., 1.]])"]},"metadata":{},"execution_count":58}]},{"cell_type":"code","source":["# Create a 3x5 array filled with 3.14\n","np.full((3, 5), 3.14)"],"metadata":{"id":"JvZL6KtAxKDP","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677260290711,"user_tz":-330,"elapsed":70,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}},"outputId":"764687be-760a-4523-b385-d11f28042629"},"execution_count":59,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[3.14, 3.14, 3.14, 3.14, 3.14],\n","       [3.14, 3.14, 3.14, 3.14, 3.14],\n","       [3.14, 3.14, 3.14, 3.14, 3.14]])"]},"metadata":{},"execution_count":59}]},{"cell_type":"code","source":["# Create an array filled with a linear sequence\n","# Starting at 0, ending at 20, stepping by 2\n","# (this is similar to the built-in range() function)\n","np.arange(0, 20, 2)"],"metadata":{"id":"8cljdE71xNvR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677260290711,"user_tz":-330,"elapsed":67,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}},"outputId":"5d8b2349-6815-4abc-e786-25d2aa184cec"},"execution_count":60,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 0,  2,  4,  6,  8, 10, 12, 14, 16, 18])"]},"metadata":{},"execution_count":60}]},{"cell_type":"code","source":["# Create an array of five values evenly spaced between 0 and 1\n","np.linspace(0, 1, 5)"],"metadata":{"id":"83UbZarFxS6b","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677260290711,"user_tz":-330,"elapsed":64,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}},"outputId":"bec75041-44c3-4719-c8a8-12575f98e1d0"},"execution_count":61,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.  , 0.25, 0.5 , 0.75, 1.  ])"]},"metadata":{},"execution_count":61}]},{"cell_type":"code","source":["# Create a 3x3 array of uniformly distributed\n","# random values between 0 and 1\n","np.random.random((3, 3))"],"metadata":{"id":"QXEyH8ZTxW0G","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677260290712,"user_tz":-330,"elapsed":63,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}},"outputId":"aa5d10a0-50d5-410a-e60b-7d87482e8693"},"execution_count":62,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0.65279032, 0.63505887, 0.99529957],\n","       [0.58185033, 0.41436859, 0.4746975 ],\n","       [0.6235101 , 0.33800761, 0.67475232]])"]},"metadata":{},"execution_count":62}]},{"cell_type":"code","source":["# Create a 3x3 array of normally distributed random values\n","# with mean 0 and standard deviation 1\n","np.random.normal(0, 1, (3, 3))"],"metadata":{"id":"04T8a-AAxbV7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677260290712,"user_tz":-330,"elapsed":60,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}},"outputId":"d9a51dfd-d26e-42d8-f4e1-1dbfe6e816cc"},"execution_count":63,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 1.0657892 , -0.69993739,  0.14407911],\n","       [ 0.3985421 ,  0.02686925,  1.05583713],\n","       [-0.07318342, -0.66572066, -0.04411241]])"]},"metadata":{},"execution_count":63}]},{"cell_type":"code","source":["# Create a 3x3 array of random integers in the interval [0, 10)\n","np.random.randint(0, 10, (3, 3))"],"metadata":{"id":"FB6_jCanxez6","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677260290712,"user_tz":-330,"elapsed":57,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}},"outputId":"342adf46-dd25-4c5f-edac-8251001f3c0c"},"execution_count":64,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[7, 2, 9],\n","       [2, 3, 3],\n","       [2, 3, 4]])"]},"metadata":{},"execution_count":64}]},{"cell_type":"code","source":["# Create a 3x3 identity matrix\n","np.eye(5)"],"metadata":{"id":"S8-Pk3q5xmdO","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677260290713,"user_tz":-330,"elapsed":55,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}},"outputId":"0f6fd60f-a648-4d74-b084-a07b7e1fe209"},"execution_count":65,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[1., 0., 0., 0., 0.],\n","       [0., 1., 0., 0., 0.],\n","       [0., 0., 1., 0., 0.],\n","       [0., 0., 0., 1., 0.],\n","       [0., 0., 0., 0., 1.]])"]},"metadata":{},"execution_count":65}]},{"cell_type":"code","source":["# Create an uninitialized array of three integers\n","# The values will be whatever happens to already exist at that memory location\n","np.empty(3)"],"metadata":{"id":"1OgzEhM2xtF5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677260290713,"user_tz":-330,"elapsed":52,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}},"outputId":"9aa18aab-139e-4434-9354-a268f9126a97"},"execution_count":66,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1.5e-323, 2.0e-323, 2.5e-323])"]},"metadata":{},"execution_count":66}]},{"cell_type":"markdown","source":["## NumPy Standard Data Types\n","\n","NumPy arrays contain values of a single type, so it is important to have detailed knowledge of those types and their limitations.\n","Because NumPy is built in C, the types will be familiar to users of C, Fortran, and other related languages.\n","\n","The standard NumPy data types are listed in the following table.\n","Note that when constructing an array, they can be specified using a string:\n","\n","```python\n","np.zeros(10, dtype='int16')\n","```\n","\n","Or using the associated NumPy object:\n","\n","```python\n","np.zeros(10, dtype=np.int16)\n","```\n","Following table shows all datatypes for Numpy Array\n","\n","| Data type\t    | Description |\n","|---------------|-------------|\n","| ``bool_``     | Boolean (True or False) stored as a byte |\n","| ``int_``      | Default integer type (same as C ``long``; normally either ``int64`` or ``int32``)| \n","| ``intc``      | Identical to C ``int`` (normally ``int32`` or ``int64``)| \n","| ``intp``      | Integer used for indexing (same as C ``ssize_t``; normally either ``int32`` or ``int64``)| \n","| ``int8``      | Byte (-128 to 127)| \n","| ``int16``     | Integer (-32768 to 32767)|\n","| ``int32``     | Integer (-2147483648 to 2147483647)|\n","| ``int64``     | Integer (-9223372036854775808 to 9223372036854775807)| \n","| ``uint8``     | Unsigned integer (0 to 255)| \n","| ``uint16``    | Unsigned integer (0 to 65535)| \n","| ``uint32``    | Unsigned integer (0 to 4294967295)| \n","| ``uint64``    | Unsigned integer (0 to 18446744073709551615)| \n","| ``float_``    | Shorthand for ``float64``.| \n","| ``float16``   | Half precision float: sign bit, 5 bits exponent, 10 bits mantissa| \n","| ``float32``   | Single precision float: sign bit, 8 bits exponent, 23 bits mantissa| \n","| ``float64``   | Double precision float: sign bit, 11 bits exponent, 52 bits mantissa| \n","| ``complex_``  | Shorthand for ``complex128``.| \n","| ``complex64`` | Complex number, represented by two 32-bit floats| \n","| ``complex128``| Complex number, represented by two 64-bit floats| "],"metadata":{"id":"FhIMJjgcx1eD"}},{"cell_type":"markdown","source":["## NumPy Array Attributes\n","\n","We will learn about important Attributes with NumPy Array objects\n","\n","Each array object has attributes ``ndim`` (the number of dimensions), ``shape`` (the size of each dimension), and ``size`` (the total size of the array), the ``dtype``, the data type of the array :"],"metadata":{"id":"_fIZQ4AKzf3e"}},{"cell_type":"code","source":["#Consider following sample arrays\n","np.random.seed(0)  # seed for reproducibility\n","\n","x1 = np.random.randint(10, size=6)  # One-dimensional array\n","x2 = np.random.randint(10, size=(3, 4))  # Two-dimensional array\n","x3 = np.random.randint(10, size=(3, 4, 5))  # Three-dimensional array"],"metadata":{"id":"ord_E53rx0Yx","executionInfo":{"status":"ok","timestamp":1677260290714,"user_tz":-330,"elapsed":50,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}}},"execution_count":67,"outputs":[]},{"cell_type":"code","source":["print(\"x3 ndim: \", x3.ndim)\n","print(\"x3 shape:\", x3.shape)\n","print(\"x3 size: \", x3.size)\n","print(\"dtype:\", x3.dtype)"],"metadata":{"id":"X4avCd82z3nZ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677260290714,"user_tz":-330,"elapsed":50,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}},"outputId":"f6027cb0-f6f6-497f-a450-e5cd2bb52949"},"execution_count":68,"outputs":[{"output_type":"stream","name":"stdout","text":["x3 ndim:  3\n","x3 shape: (3, 4, 5)\n","x3 size:  60\n","dtype: int64\n"]}]},{"cell_type":"markdown","source":["Other attributes include ``itemsize``, which lists the size (in bytes) of each array element, and ``nbytes``, which lists the total size (in bytes) of the array:"],"metadata":{"id":"gD5y17ur0SUY"}},{"cell_type":"code","source":["print(\"itemsize:\", x3.itemsize, \"bytes\")\n","print(\"nbytes:\", x3.nbytes, \"bytes\")"],"metadata":{"id":"iIACfZGJz88F","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677260290715,"user_tz":-330,"elapsed":48,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}},"outputId":"c37251d3-e9c5-4b98-860a-295319dddd21"},"execution_count":69,"outputs":[{"output_type":"stream","name":"stdout","text":["itemsize: 8 bytes\n","nbytes: 480 bytes\n"]}]},{"cell_type":"markdown","source":["## Array Indexing: Accessing Single Elements\n","Next we learn how to access single element in a NumPy array\n","NumPy follows indexing similar to that of Python in a dimension index starts at 0 till length-1 \n","\n","So x1[0] will mean 0th element and x1[5] means sixth element in array x1.\n","\n","We can use negative index value to indicate accessing elements from back side of array.\n","\n","In a multi-dimensional array, items can be accessed using a comma-separated tuple of indices as shown in below code cell."],"metadata":{"id":"QhHVb0nMGphd"}},{"cell_type":"code","source":["# acessing third list's first element\n","x2[2, 0]"],"metadata":{"id":"DYhobFMoJV9c","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677260290716,"user_tz":-330,"elapsed":47,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}},"outputId":"a5632872-66fd-44a6-db78-34881db7ad8a"},"execution_count":70,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1"]},"metadata":{},"execution_count":70}]},{"cell_type":"code","source":["# accessing second last element from second list \n","x2[1, -2]"],"metadata":{"id":"dm0FVTT8JlL4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677260290716,"user_tz":-330,"elapsed":44,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}},"outputId":"5de77490-398d-4251-da6a-5dd108198c90"},"execution_count":71,"outputs":[{"output_type":"execute_result","data":{"text/plain":["8"]},"metadata":{},"execution_count":71}]},{"cell_type":"code","source":["# modifying value at a perticular index\n","x2[0, 0] = 12\n","x2"],"metadata":{"id":"8McLQYbmJ1gb","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677260290717,"user_tz":-330,"elapsed":42,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}},"outputId":"b813147c-de9e-414d-a8b1-cd3b3dcac0fb"},"execution_count":72,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[12,  5,  2,  4],\n","       [ 7,  6,  8,  8],\n","       [ 1,  6,  7,  7]])"]},"metadata":{},"execution_count":72}]},{"cell_type":"markdown","source":["## Array Slicing: Accessing Subarrays\n","\n","Just as we can use square brackets to access individual array elements, we can also use them to access subarrays with the *slice* notation, marked by the colon (``:``) character.\n","The NumPy slicing syntax follows that of the standard Python list; to access a slice of an array ``x``, use this:\n","``` python\n","x[start:stop:step]\n","```\n","If any of these are unspecified, they default to the values ``start=0``, ``stop=``*``size of dimension``*, ``step=1``.\n","We'll take a look at accessing sub-arrays in one dimension and in multiple dimensions."],"metadata":{"id":"hwr6_1yvKQf9"}},{"cell_type":"markdown","source":["### One-dimensional subarrays"],"metadata":{"id":"aEoCkO4ZLT7W"}},{"cell_type":"code","source":["x = np.arange(10)\n","x"],"metadata":{"id":"YRDpL3ZzLa1V","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677260290717,"user_tz":-330,"elapsed":40,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}},"outputId":"ba9ee5af-ef79-46dd-ad6d-46e4e13dea69"},"execution_count":73,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"]},"metadata":{},"execution_count":73}]},{"cell_type":"code","source":["x[:5]  # first five elements"],"metadata":{"id":"1J9mkW48LcNL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677260290717,"user_tz":-330,"elapsed":37,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}},"outputId":"43ce692e-29ae-4bee-e673-9411ad6b6e0e"},"execution_count":74,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 1, 2, 3, 4])"]},"metadata":{},"execution_count":74}]},{"cell_type":"code","source":["x[:5]  # elements after index five"],"metadata":{"id":"fab1B-FYLgKV","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677260290718,"user_tz":-330,"elapsed":35,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}},"outputId":"87d3510f-9b27-45c3-8285-5bedb0186782"},"execution_count":75,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 1, 2, 3, 4])"]},"metadata":{},"execution_count":75}]},{"cell_type":"code","source":["x[4:7]  # sub-array of index 4, 5, 6"],"metadata":{"id":"5N3cpw-ULiqV","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677260290718,"user_tz":-330,"elapsed":32,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}},"outputId":"15744d7f-1443-4927-be6c-9590e988f4ad"},"execution_count":76,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([4, 5, 6])"]},"metadata":{},"execution_count":76}]},{"cell_type":"code","source":["x[::2]  # every other element"],"metadata":{"id":"iNsOAUQDMDx_","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677260290719,"user_tz":-330,"elapsed":31,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}},"outputId":"f66027d9-e5c9-4399-fda3-c80fcb1ce781"},"execution_count":77,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 2, 4, 6, 8])"]},"metadata":{},"execution_count":77}]},{"cell_type":"code","source":["x[2::2]  # every other element starting at index 2"],"metadata":{"id":"yilqVhunSU5u","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677260290719,"user_tz":-330,"elapsed":28,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}},"outputId":"30a53bcc-ca68-472c-8831-25d97e2afdb6"},"execution_count":78,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([2, 4, 6, 8])"]},"metadata":{},"execution_count":78}]},{"cell_type":"markdown","source":["A potentially confusing case is when the ``step`` value is negative.\n","In this case, the defaults for ``start`` and ``stop`` are swapped.\n","This becomes a convenient way to reverse an array:"],"metadata":{"id":"o6_sI_lsSlvK"}},{"cell_type":"code","source":["x[::-1]  # all elements, reversed"],"metadata":{"id":"HtaibN6JSlJg","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677260290719,"user_tz":-330,"elapsed":26,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}},"outputId":"3a50ed1e-792b-4ad0-d3eb-18b7bc8cc1f3"},"execution_count":79,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([9, 8, 7, 6, 5, 4, 3, 2, 1, 0])"]},"metadata":{},"execution_count":79}]},{"cell_type":"code","source":["x[3::-2]  # reversed every other from index 3"],"metadata":{"id":"wbfEp5IESpQT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677260291212,"user_tz":-330,"elapsed":516,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}},"outputId":"55a31324-57cc-45c7-a21b-2191e192a0fc"},"execution_count":80,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([3, 1])"]},"metadata":{},"execution_count":80}]},{"cell_type":"markdown","source":["### Multi-dimensional subarrays\n","\n","Multi-dimensional slices work in the same way, with multiple slices separated by commas.\n","For example:"],"metadata":{"id":"8IIrPEOAVPd_"}},{"cell_type":"code","source":["x2[:2, :3]  # This is sub Array of x2 with first two rows and first three columns"],"metadata":{"id":"phD6ltHjS5b0","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677260291212,"user_tz":-330,"elapsed":54,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}},"outputId":"1e9bb239-d224-4be9-e6ab-6e4cbaeb6ba4"},"execution_count":81,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[12,  5,  2],\n","       [ 7,  6,  8]])"]},"metadata":{},"execution_count":81}]},{"cell_type":"code","source":["#Check how we can reverse the multidimension array\n","x2[::-1, ::-1]"],"metadata":{"id":"LE7O0SIfVa8F","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677260291213,"user_tz":-330,"elapsed":53,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}},"outputId":"67d069c2-07e9-4c69-8b03-e75ec219e5ad"},"execution_count":82,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 7,  7,  6,  1],\n","       [ 8,  8,  6,  7],\n","       [ 4,  2,  5, 12]])"]},"metadata":{},"execution_count":82}]},{"cell_type":"markdown","source":["#### Accessing array rows and columns\n","\n","One commonly needed routine is accessing of single rows or columns of an array.\n","This can be done by combining indexing and slicing, using an empty slice marked by a single colon (``:``):"],"metadata":{"id":"ikdPJUKUW0lU"}},{"cell_type":"code","source":["print(x2[:, 0])  # first column of x2"],"metadata":{"id":"pmv7b_0jVa0Y","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677260291213,"user_tz":-330,"elapsed":51,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}},"outputId":"6a295ba2-91eb-4b2a-e2dc-63f5a6c8b337"},"execution_count":83,"outputs":[{"output_type":"stream","name":"stdout","text":["[12  7  1]\n"]}]},{"cell_type":"code","source":["print(x2[0, :])  # first row of x2"],"metadata":{"id":"xB51GFTNW5b8","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677260291214,"user_tz":-330,"elapsed":49,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}},"outputId":"acfc59ba-597b-4536-cc94-16abc2184d2a"},"execution_count":84,"outputs":[{"output_type":"stream","name":"stdout","text":["[12  5  2  4]\n"]}]},{"cell_type":"markdown","source":["### Subarrays as no-copy views\n","\n","One important–and extremely useful–thing to know about array slices is that they return *views* rather than *copies* of the array data.\n","This is one area in which NumPy array slicing differs from Python list slicing: in lists, slices will be copies.\n","Consider our two-dimensional array from before:"],"metadata":{"id":"Z7qeID5QXLv_"}},{"cell_type":"code","source":["#Extract 2*2 sub array from x2\n","x2_sub = x2[:2, :2]\n","print(x2_sub)"],"metadata":{"id":"YqS3iYj7XNgB","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677260291214,"user_tz":-330,"elapsed":46,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}},"outputId":"fbf73a8c-f104-4a2c-e961-baaada6b2c80"},"execution_count":85,"outputs":[{"output_type":"stream","name":"stdout","text":["[[12  5]\n"," [ 7  6]]\n"]}]},{"cell_type":"code","source":["x2_sub[0, 0] = 99\n","#Above statement not oly modifies subarray but also the original array as well\n","print(x2_sub)"],"metadata":{"id":"Cu0tFyfcXZqp","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677260291214,"user_tz":-330,"elapsed":43,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}},"outputId":"42928dd1-80f7-45f2-f415-b8c7f64e3575"},"execution_count":86,"outputs":[{"output_type":"stream","name":"stdout","text":["[[99  5]\n"," [ 7  6]]\n"]}]},{"cell_type":"markdown","source":["Despite the nice features of array views, it is sometimes useful to instead explicitly copy the data within an array or a subarray. This can be most easily done with the ``copy()`` method:"],"metadata":{"id":"KuxFe4X4XrLA"}},{"cell_type":"code","source":["x2_sub[0, 0] = 42\n","print(x2_sub)\n","print(x2)"],"metadata":{"id":"SK11XTrXYqhl","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677260998083,"user_tz":-330,"elapsed":484,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}},"outputId":"ad7c4c5b-0a7e-4701-f807-c261243b3752"},"execution_count":106,"outputs":[{"output_type":"stream","name":"stdout","text":["[[42  5]\n"," [ 7  6]]\n","[99 99]\n"]}]},{"cell_type":"markdown","source":["## Array Concatenation and Splitting\n","\n","All of the preceding routines worked on single arrays. It's also possible to combine multiple arrays into one, and to conversely split a single array into multiple arrays. We'll take a look at those operations here.\n","\n","\n","### Concatenation of arrays\n","\n","Concatenation, or joining of two arrays in NumPy, is primarily accomplished using the routines ``np.concatenate``, ``np.vstack``, and ``np.hstack``.\n","``np.concatenate`` takes a tuple or list of arrays as its first argument, as we can see here:"],"metadata":{"id":"weHsUSMJY1DT"}},{"cell_type":"code","source":["x = np.array([1, 2, 3])\n","y = np.array([3, 2, 1])\n","np.concatenate([x, y])"],"metadata":{"id":"efGYrUJqZTkB","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677260291215,"user_tz":-330,"elapsed":39,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}},"outputId":"fbf15596-3fb0-423a-dccf-3f5f58664f12"},"execution_count":88,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1, 2, 3, 3, 2, 1])"]},"metadata":{},"execution_count":88}]},{"cell_type":"code","source":["grid = np.array([[1, 2, 3],\n","                 [4, 5, 6]])"],"metadata":{"id":"nIppqCTKZZ_k","executionInfo":{"status":"ok","timestamp":1677260291215,"user_tz":-330,"elapsed":36,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}}},"execution_count":89,"outputs":[]},{"cell_type":"code","source":["# concatenate along the first axis\n","np.concatenate([grid, grid])"],"metadata":{"id":"mSqvbZmeZbLK","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677260291216,"user_tz":-330,"elapsed":37,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}},"outputId":"61409f21-735a-4cb2-c2a0-ade78eea732f"},"execution_count":90,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[1, 2, 3],\n","       [4, 5, 6],\n","       [1, 2, 3],\n","       [4, 5, 6]])"]},"metadata":{},"execution_count":90}]},{"cell_type":"code","source":["# concatenate along the second axis (zero-indexed)\n","np.concatenate([grid, grid], axis=1)"],"metadata":{"id":"TXZ2uJjEZeZX","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677260291216,"user_tz":-330,"elapsed":34,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}},"outputId":"4ba4d648-b13b-4f2f-ce3d-8693b487a5b4"},"execution_count":91,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[1, 2, 3, 1, 2, 3],\n","       [4, 5, 6, 4, 5, 6]])"]},"metadata":{},"execution_count":91}]},{"cell_type":"markdown","source":["When joining arrays of mixed dimensions, it can be clearer to use the ``np.vstack`` (vertical stack) and ``np.hstack`` (horizontal stack) functions as shown below:"],"metadata":{"id":"V2_6-QWHZngr"}},{"cell_type":"code","source":["x = np.array([1, 2, 3])\n","grid = np.array([[9, 8, 7],\n","                 [6, 5, 4]])\n","\n","# vertically stack the arrays\n","np.vstack([x, grid])"],"metadata":{"id":"vEPmTdZ2ZzCS","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677260291216,"user_tz":-330,"elapsed":30,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}},"outputId":"19a89b2d-00a4-4b13-a966-fde3a050e1a5"},"execution_count":92,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[1, 2, 3],\n","       [9, 8, 7],\n","       [6, 5, 4]])"]},"metadata":{},"execution_count":92}]},{"cell_type":"code","source":["# horizontally stack the arrays\n","y = np.array([[99],\n","              [99]])\n","np.hstack([grid, y])"],"metadata":{"id":"PWrrAOr-Z1s2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677260291217,"user_tz":-330,"elapsed":28,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}},"outputId":"4f26631b-8e1d-42a5-8491-66ae76e575dd"},"execution_count":93,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 9,  8,  7, 99],\n","       [ 6,  5,  4, 99]])"]},"metadata":{},"execution_count":93}]},{"cell_type":"markdown","source":["### Splitting of arrays\n","\n","The opposite of concatenation is splitting, which is implemented by the functions ``np.split``, ``np.hsplit``, and ``np.vsplit``.  For each of these, we can pass a list of indices giving the split points:"],"metadata":{"id":"bB5Ib1CsZ2rM"}},{"cell_type":"code","source":["x = [1, 2, 3, 99, 99, 3, 2, 1]\n","x1, x2, x3 = np.split(x, [3, 5])\n","print(x1, x2, x3)"],"metadata":{"id":"TZTwODYMZ-1J","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677260291217,"user_tz":-330,"elapsed":26,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}},"outputId":"c8a86747-3c93-4d07-900d-09d3724869a0"},"execution_count":94,"outputs":[{"output_type":"stream","name":"stdout","text":["[1 2 3] [99 99] [3 2 1]\n"]}]},{"cell_type":"markdown","source":["Notice that *N* split-points, leads to *N + 1* subarrays.\n","The related functions ``np.hsplit`` and ``np.vsplit`` are similar:"],"metadata":{"id":"dfhXzVNJaJF6"}},{"cell_type":"code","source":["grid = np.arange(16).reshape((4, 4))\n","grid"],"metadata":{"id":"j6Q3sbZmZ_kL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677260291217,"user_tz":-330,"elapsed":22,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}},"outputId":"7b195a95-4138-4622-a574-03237b2d4e55"},"execution_count":95,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 0,  1,  2,  3],\n","       [ 4,  5,  6,  7],\n","       [ 8,  9, 10, 11],\n","       [12, 13, 14, 15]])"]},"metadata":{},"execution_count":95}]},{"cell_type":"code","source":["upper, lower = np.vsplit(grid, [2])\n","print(upper)\n","print(lower)"],"metadata":{"id":"DNG8leinaMMa","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677260291217,"user_tz":-330,"elapsed":19,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}},"outputId":"eed3eb7a-fbc5-45e6-80f9-b64918a04597"},"execution_count":96,"outputs":[{"output_type":"stream","name":"stdout","text":["[[0 1 2 3]\n"," [4 5 6 7]]\n","[[ 8  9 10 11]\n"," [12 13 14 15]]\n"]}]},{"cell_type":"code","source":["left, right = np.hsplit(grid, [2])\n","print(left)\n","print(right)"],"metadata":{"id":"I94NlVPXaOfI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677260291218,"user_tz":-330,"elapsed":17,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}},"outputId":"de88cec9-ee0e-4833-9a45-f973be87e039"},"execution_count":97,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 0  1]\n"," [ 4  5]\n"," [ 8  9]\n"," [12 13]]\n","[[ 2  3]\n"," [ 6  7]\n"," [10 11]\n"," [14 15]]\n"]}]},{"cell_type":"markdown","source":["## Introducing UFuncs\n","\n","For many types of operations, NumPy provides a convenient interface into just this kind of statically typed, compiled routine. This is known as a *vectorized* operation.\n","This can be accomplished by simply performing an operation on the array, which will then be applied to each element.\n","This vectorized approach is designed to push the loop into the compiled layer that underlies NumPy, leading to much faster execution."],"metadata":{"id":"OzROt5Aa_Qxx"}},{"cell_type":"code","source":["#Consider following loop based implementation to ind reciprocals for each element of an array\n","np.random.seed(0)\n","\n","def compute_reciprocals(values):\n","    output = np.empty(len(values))\n","    for i in range(len(values)):\n","        output[i] = 1.0 / values[i]\n","    return output\n","        \n","big_array = np.random.randint(1, 100, size=1000000)\n","%timeit compute_reciprocals(big_array)"],"metadata":{"id":"aW_dwQab_dPF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677260312971,"user_tz":-330,"elapsed":21766,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}},"outputId":"3d7aa901-f8d7-4a43-8287-0e8f99f13f3d"},"execution_count":98,"outputs":[{"output_type":"stream","name":"stdout","text":["2.75 s ± 156 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n"]}]},{"cell_type":"code","source":["#Same operatoin using UFuncs applying '/' over array elements\n","%timeit (1.0 / big_array)"],"metadata":{"id":"C1qvC-0X_2Ue","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677260322443,"user_tz":-330,"elapsed":9484,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}},"outputId":"5dbaaa2f-99ad-41fd-cdee-789a3f15d62b"},"execution_count":99,"outputs":[{"output_type":"stream","name":"stdout","text":["1.14 ms ± 80.4 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)\n"]}]},{"cell_type":"markdown","source":["Vectorized operations in NumPy are implemented via *ufuncs*, whose main purpose is to quickly execute repeated operations on values in NumPy arrays. UFuncs are extremely flexible – before we saw an operation between a scalar and an array, but we can also operate between two arrays as well as multidimentional arrays.\n","\n","Computations using vectorization through ufuncs are nearly always more efficient than their counterpart implemented using Python loops, especially as the arrays grow in size.\n","Any time you see such a loop in a Python script, you should consider whether it can be replaced with a vectorized expression."],"metadata":{"id":"zWEw0XwOATnq"}},{"cell_type":"markdown","source":["## Exploring NumPy's UFuncs\n","\n","Ufuncs exist in two flavors: *unary ufuncs*, which operate on a single input, and *binary ufuncs*, which operate on two inputs.\n","\n","\n","### Array arithmetic\n","\n","NumPy's ufuncs feel very natural to use because they make use of Python's native arithmetic operators.\n","The standard addition, subtraction, multiplication, and division can all be used:"],"metadata":{"id":"LmvTAwQxBeu9"}},{"cell_type":"code","source":["x = np.arange(4)\n","print(\"x     =\", x)\n","print(\"x + 5 =\", x + 5)\n","print(\"x - 5 =\", x - 5)\n","print(\"x * 2 =\", x * 2)\n","print(\"x / 2 =\", x / 2)\n","print(\"x // 2 =\", x // 2)  # floor division\n","#some advanced arithmatic expression   -(x/2+1)^2 \n","-(0.5*x + 1) ** 2"],"metadata":{"id":"nR25dPabASNy","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677260322443,"user_tz":-330,"elapsed":31,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}},"outputId":"586d356e-6955-4c93-d83f-e20e1ab9a8f9"},"execution_count":100,"outputs":[{"output_type":"stream","name":"stdout","text":["x     = [0 1 2 3]\n","x + 5 = [5 6 7 8]\n","x - 5 = [-5 -4 -3 -2]\n","x * 2 = [0 2 4 6]\n","x / 2 = [0.  0.5 1.  1.5]\n","x // 2 = [0 0 1 1]\n"]},{"output_type":"execute_result","data":{"text/plain":["array([-1.  , -2.25, -4.  , -6.25])"]},"metadata":{},"execution_count":100}]},{"cell_type":"markdown","source":["The following table lists the arithmetic operators implemented in NumPy:\n","\n","| Operator\t    | Equivalent ufunc    | Description                           |\n","|---------------|---------------------|---------------------------------------|\n","|``+``          |``np.add``           |Addition (e.g., ``1 + 1 = 2``)         |\n","|``-``          |``np.subtract``      |Subtraction (e.g., ``3 - 2 = 1``)      |\n","|``-``          |``np.negative``      |Unary negation (e.g., ``-2``)          |\n","|``*``          |``np.multiply``      |Multiplication (e.g., ``2 * 3 = 6``)   |\n","|``/``          |``np.divide``        |Division (e.g., ``3 / 2 = 1.5``)       |\n","|``//``         |``np.floor_divide``  |Floor division (e.g., ``3 // 2 = 1``)  |\n","|``**``         |``np.power``         |Exponentiation (e.g., ``2 ** 3 = 8``)  |\n","|``%``          |``np.mod``           |Modulus/remainder (e.g., ``9 % 4 = 1``)|"],"metadata":{"id":"a0WbgBQiB-i4"}},{"cell_type":"markdown","source":["### Specialized ufuncs\n","\n","NumPy has many more ufuncs available, including hyperbolic trig functions, bitwise arithmetic, comparison operators, conversions from radians to degrees, rounding and remainders, and much more.\n","A look through the NumPy documentation reveals a lot of interesting functionality.\n","\n","Another excellent source for more specialized and obscure ufuncs is the submodule ``scipy.special``.\n","If you want to compute some obscure mathematical function on your data, chances are it is implemented in ``scipy.special``.\n","There are far too many functions to list them all, but the following snippet shows a couple that might come up in a statistics context:"],"metadata":{"id":"igbeuwzCCSNq"}},{"cell_type":"code","source":["#importing package special from scipy package\n","from scipy import special"],"metadata":{"id":"lLWR2D17CXup","executionInfo":{"status":"ok","timestamp":1677260322444,"user_tz":-330,"elapsed":27,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}}},"execution_count":101,"outputs":[]},{"cell_type":"code","source":["# Gamma functions (generalized factorials) and related functions\n","x = [1, 5, 10]\n","print(\"gamma(x)     =\", special.gamma(x))\n","print(\"ln|gamma(x)| =\", special.gammaln(x))\n","print(\"beta(x, 2)   =\", special.beta(x, 2))"],"metadata":{"id":"zZIUIA_TCm3N","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677260322444,"user_tz":-330,"elapsed":27,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}},"outputId":"177ea633-f967-4fc1-cfaa-0e00f0f7cdc6"},"execution_count":102,"outputs":[{"output_type":"stream","name":"stdout","text":["gamma(x)     = [1.0000e+00 2.4000e+01 3.6288e+05]\n","ln|gamma(x)| = [ 0.          3.17805383 12.80182748]\n","beta(x, 2)   = [0.5        0.03333333 0.00909091]\n"]}]},{"cell_type":"markdown","source":["Many other special functions like error functions, beta integral can also be evaluated."],"metadata":{"id":"NLnCoznWCoE9"}},{"cell_type":"markdown","source":["### Aggregates\n","\n","For binary ufuncs, there are some interesting aggregates that can be computed directly from the object.\n","For example, if we'd like to *reduce* an array with a particular operation, we can use the ``reduce`` method of any ufunc.\n","A reduce repeatedly applies a given operation to the elements of an array until only a single result remains.\n","\n","For example, calling ``reduce`` on the ``add`` ufunc returns the sum of all elements in the array:"],"metadata":{"id":"IQRLOEyhC7h_"}},{"cell_type":"code","source":["x = np.arange(1, 6)\n","np.add.reduce(x)"],"metadata":{"id":"S-tqV3rWDTQT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677260322444,"user_tz":-330,"elapsed":24,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}},"outputId":"a5a148a5-0d52-4f09-f4bb-1a01befc8cc8"},"execution_count":103,"outputs":[{"output_type":"execute_result","data":{"text/plain":["15"]},"metadata":{},"execution_count":103}]},{"cell_type":"code","source":["np.multiply.reduce(x)"],"metadata":{"id":"eyx37Xz9DUEK","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677260322445,"user_tz":-330,"elapsed":22,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}},"outputId":"ba7d41d0-b40a-4ee7-ed92-6afc56cea873"},"execution_count":104,"outputs":[{"output_type":"execute_result","data":{"text/plain":["120"]},"metadata":{},"execution_count":104}]},{"cell_type":"code","source":["#note the difference in output with accumulate\n","np.add.accumulate(x)"],"metadata":{"id":"clon3tBiDWql","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677260322445,"user_tz":-330,"elapsed":19,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}},"outputId":"e52bbad2-dae3-43eb-8c32-b2af4a5d68bd"},"execution_count":105,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 1,  3,  6, 10, 15])"]},"metadata":{},"execution_count":105}]},{"cell_type":"markdown","source":["**Answer Following Questions :** (You should either type the answer in separate text cell or code cell as per questoins asked)\n","          \n","\n","\n","1.   What are UFuncs un numpy? \n","2.   Which are various attributes of numy arrays object?\n","3.   If you have 3 dimentional array in numpy object Obj how to identify its size, type and dimentions ?\n","4.   Consider Obj object has dimentions 3\\*4\\*2  and you want to convert it to 4\\*6 shape, explain how will you do it ? Show this using a code cell, taking an example of 3\\*4\\*2 np array of random int between 1 and 50. \n","5.   Consider above 4\\*6 array, sample 2\\*3 sub array from left  bottom of this array store the result in varible named subOb\n","\n","**Conclusion :**  Thus we have learned basics of Numpy library for storing and efficiently processing any external data into python execution pipeline.  "],"metadata":{"id":"m56WFV4aELVz"}},{"cell_type":"markdown","source":["1.   What are UFuncs un numpy? "],"metadata":{"id":"SIkvDoQqjTaa"}},{"cell_type":"markdown","source":["#answer\n","UFuncs (Universal Functions) in NumPy are functions that operate on ndarrays in an element- wise manner, which means that the operation is applied to each element in the ndarrayindividually. UFuncs are designed to be fast, and can be used to perform a wide variety of mathematical operations on ndarrays, such as arithmetic, trigonometric, and logarithmicfunctions, among others. One of the key advantages of UFuncs is that they allow for vectorization of operations, whichmeans that the operations can be applied to entire arrays instead of having to loop over eachelement in the array individually. This can lead to significant performance improvements, particularly when working with large arrays. Some examples of UFuncs in NumPy include: 1.Arithmetic operations (addition, subtraction, multiplication, division, etc.) 2.Trigonometric functions (sine, cosine, tangent, etc.) 3.Exponential and logarithmic functions (exponential, logarithm, etc.) 4.Comparison operators (less than, greater than, equal to, etc.) UFuncs in NumPy are typically implemented in C and compiled with efficient low-level code, making them very fast and efficient. They can be accessed using the standard NumPy syntax, such as np.add(), np.sin(), np.exp(), etc\n","\n"],"metadata":{"id":"NT54teuxjaHB"}},{"cell_type":"markdown","source":["2.   Which are various attributes of numy arrays object?"],"metadata":{"id":"DbX4JVtyjv6m"}},{"cell_type":"markdown","source":["#answer\n","In NumPy, ndarray is the main object used to represent multi-dimensional arrays. It has manyattributes that can be used to get information about the array. Some of the commonly usedattributes of ndarray object are: 1.ndarray.shape: returns the dimensions of the array as a tuple. For a 1D array of lengthn, shape would be (n,). For a 2D array with n rows and m columns, shape would be (n, m), andsoon. 2.ndarray.ndim: returns the number of dimensions of the array. 3.ndarray.size: returns the total number of elements in the array. 4.ndarray.dtype: returns the data type of the array elements. 5.ndarray.itemsize: returns the size of each element in bytes. 6.ndarray.nbytes: returns the total number of bytes used by the array data. 7.ndarray.T: returns the transpose of the array. ndarray.real: returns the real part of the array (if it has complex elements). 8.ndarray.imag: returns the imaginary part of the array (if it has complex elements). 9.ndarray.flat: returns an iterator over the array elements in a one-dimensional form. 10.ndarray.flags: returns information about the memory layout and other attributes of thearray. These are just a few examples of the many attributes available in NumPy ndarray objects. Byaccessing these attributes, we can obtain various information about the array, such as itsshape, size, data type, and more."],"metadata":{"id":"brKDsEenjyrQ"}},{"cell_type":"markdown","source":["3.   If you have 3 dimentional array in numpy object Obj how to identify its size, type and dimentions ?"],"metadata":{"id":"vmMktHYqj5kO"}},{"cell_type":"markdown","source":["#answer\n","To identify the size, data type, and dimensions of a 3-dimensional NumPy array, you can usethe following attributes and methods: shape: This attribute returns a tuple representing the dimensions of the array. For a 3- dimensional array, the shape will be of the form (n, m, p), where n is the size of the first dimension, m is the size of the second dimension, and p is the size of the third dimension. For example, to get the shape of the array Obj, you can use Obj.shape. dtype: This attribute returns the data type of the array. For example, to get the data type of thearray Obj, you can use Obj.dtype. size: This method returns the total number of elements in the array. For example, to get thesize of the array Obj, you can use Obj.size. Here is an example of how you can use these attributes and methods:"],"metadata":{"id":"ysMcZKUJj8Uq"}},{"cell_type":"code","source":["import numpy as np\n","# create a 3-dimensional array\n","Obj = np.array([[[1, 2], [3, 4]], [[5, 6], [7, 8]]])\n","# get the shape of the array\n","print(\"Shape:\", Obj.shape)\n","# get the data type of the array\n","print(\"Data type:\", Obj.dtype)\n","# get the total number of elements in the array\n","print(\"Size:\", Obj.size)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YeXaxlPjkM5A","executionInfo":{"status":"ok","timestamp":1677261343893,"user_tz":-330,"elapsed":376,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}},"outputId":"e9266e21-a2d3-4c1e-b2fd-5e153c180933"},"execution_count":107,"outputs":[{"output_type":"stream","name":"stdout","text":["Shape: (2, 2, 2)\n","Data type: int64\n","Size: 8\n"]}]},{"cell_type":"markdown","source":["4.   Consider Obj object has dimentions 3\\*4\\*2  and you want to convert it to 4\\*6 shape, explain how will you do it ? Show this using a code cell, taking an example of 3\\*4\\*2 np array of random int between 1 and 50"],"metadata":{"id":"y4qwsk89kVrB"}},{"cell_type":"markdown","source":["#answer\n","To convert an array of shape (342,) to shape (46,), we need to reshape the array whileensuring that all the elements in the original array are preserved. We can do this using thereshape method of numpy. Here's an example code that demonstrates how to reshape a random integer numpy array of shape (34, 2) with values between 1 and 50 to a new shape of (46,):"],"metadata":{"id":"AmLnl4HekbfG"}},{"cell_type":"code","source":["import numpy as np\n","# Create a random integer numpy array of shape (34, 2) with values between 1 and 50\n","arr = np.random.randint(1, 50, size=(34, 2))\n","print(\"Original array of shape:\", arr.shape)\n","print(arr)\n","# Reshape the array to shape (46,) while preserving all elements\n","new_shape = (46,)\n","if np.prod(new_shape) == np.prod(arr.shape):\n"," new_arr = arr.reshape(new_shape)\n"," print(\"Reshaped array of shape:\", new_arr.shape)\n"," print(new_arr)\n","else:\n"," print(\"Cannot reshape array to new shape\", new_shape, \"while preserving all elements\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hgxD3Ih7kkmo","executionInfo":{"status":"ok","timestamp":1677261475517,"user_tz":-330,"elapsed":342,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}},"outputId":"9d5fc5f1-9745-411f-d4e9-ff1244881d8e"},"execution_count":108,"outputs":[{"output_type":"stream","name":"stdout","text":["Original array of shape: (34, 2)\n","[[26 27]\n"," [ 6 27]\n"," [23 19]\n"," [36 29]\n"," [18  7]\n"," [ 8 28]\n"," [49 14]\n"," [ 3 40]\n"," [10 30]\n"," [12 29]\n"," [45 30]\n"," [14 41]\n"," [17  1]\n"," [14 20]\n"," [45 36]\n"," [30 12]\n"," [28 29]\n"," [22  6]\n"," [44 39]\n"," [33 44]\n"," [18 25]\n"," [ 7 42]\n"," [27 26]\n"," [24 12]\n"," [46  1]\n"," [42 44]\n"," [ 2 48]\n"," [15 20]\n"," [44  2]\n"," [47  2]\n"," [29 25]\n"," [42 45]\n"," [38 14]\n"," [48 45]]\n","Cannot reshape array to new shape (46,) while preserving all elements\n"]}]},{"cell_type":"markdown","source":["5.   Consider above 4\\*6 array, sample 2\\*3 sub array from left  bottom of this array store the result in varible named subOb"],"metadata":{"id":"zty7piOpkzDu"}},{"cell_type":"markdown","source":["#answer\n"],"metadata":{"id":"RekHAakDk338"}},{"cell_type":"code","source":["import numpy as np\n","\n","# Create a 4x6 array\n","my_array = np.array([[1, 2, 3, 4, 5, 6],\n","                     [7, 8, 9, 10, 11, 12],\n","                     [13, 14, 15, 16, 17, 18],\n","                     [19, 20, 21, 22, 23, 24]])\n","\n","# Extract a 2x3 subarray from the left bottom corner\n","subObj = my_array[2:, :3]\n","\n","print(subObj)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8iFlnIlPlH3a","executionInfo":{"status":"ok","timestamp":1677261577951,"user_tz":-330,"elapsed":377,"user":{"displayName":"amberkar kunal","userId":"06385227942246417803"}},"outputId":"9cd95a3f-4d8f-40c4-bdcb-2730d8adf88b"},"execution_count":109,"outputs":[{"output_type":"stream","name":"stdout","text":["[[13 14 15]\n"," [19 20 21]]\n"]}]},{"cell_type":"markdown","source":["**Conclusion :**  Thus we have learned basics of Numpy library for storing and efficiently processing any external data into python execution pipeline.  "],"metadata":{"id":"kKfcprMrlLFM"}}]}